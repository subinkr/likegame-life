// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  nickname  String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  stats     Stat[]
  strengthRecords StrengthRecord[]
  skills    Skill[]
  badges    UserBadge[]
  titles    UserTitle[]
  quests    Quest[]      @relation("QuestCreator")
  acceptedQuests Quest[] @relation("QuestHelper")
  parties   Party[]      @relation("PartyLeader")
  partyMembers PartyMember[]
  wisdomBooks WisdomBook[]
  books     Book[]
  wisdomNotes WisdomNote[]
  chatParticipants ChatParticipant[]
  chatMessages ChatMessage[]
}

model Stat {
  id        String   @id @default(cuid())
  userId    String
  month     String   // YYYY-MM 형식
  strength  Int      @default(0)
  agility   Int      @default(0)
  wisdom    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StrengthRecord {
  id        String   @id @default(cuid())
  userId    String
  bench     Int      @default(0)
  squat     Int      @default(0)
  deadlift  Int      @default(0)
  total     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String
  category    String?
  acquiredDate DateTime
  expiryDate  DateTime?
  parentSkillId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentSkill Skill?   @relation("SkillHierarchy", fields: [parentSkillId], references: [id])
  childSkills Skill[]  @relation("SkillHierarchy")
}

model Badge {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  rarity      String
  icon        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  userBadges  UserBadge[]
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  achieved  Boolean  @default(false)
  achievedDate DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
}

model Title {
  id             String   @id @default(cuid())
  name           String   @unique
  description    String
  category       String?
  rarity         String
  requirement    String?
  requiredBadges String[] // JSON 배열로 저장
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // 관계
  userTitles    UserTitle[]
}

model UserTitle {
  id          String   @id @default(cuid())
  userId      String
  titleId     String
  achieved    Boolean  @default(false)
  selected    Boolean  @default(false)
  achievedDate DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       Title    @relation(fields: [titleId], references: [id], onDelete: Cascade)

  @@unique([userId, titleId])
}

model Quest {
  id          String   @id @default(cuid())
  title       String
  description String
  location    String
  reward      Int      // 원화 보상 (예: 50000 = 5만원)
  rewardPaid  Boolean  @default(false)  // 보상 지급 여부
  paidAt      DateTime? // 보상 지급 일시
  status      String   // OPEN, IN_PROGRESS, COMPLETED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  creatorId   String
  acceptedBy  String?
  creator     User     @relation("QuestCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  acceptedByUser User? @relation("QuestHelper", fields: [acceptedBy], references: [id])
  chatRoom    ChatRoom?
  chatRoomId  String?  @unique
}

model Party {
  id          String   @id @default(cuid())
  name        String
  description String
  maxMembers  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  leaderId    String
  leader      User     @relation("PartyLeader", fields: [leaderId], references: [id], onDelete: Cascade)
  members     PartyMember[]
  chatRoom    ChatRoom?
  chatRoomId  String?  @unique
}

model PartyMember {
  id        String   @id @default(cuid())
  partyId   String
  userId    String
  joinedAt  DateTime @default(now())

  party     Party    @relation(fields: [partyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([partyId, userId])
}

model WisdomBook {
  id         String   @id @default(cuid())
  userId     String
  title      String
  quote      String
  impression String
  date       DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Book {
  id          String   @id @default(cuid())
  userId      String
  title       String
  author      String
  isbn        String?
  description String?
  coverImage  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  wisdomNotes WisdomNote[]
}

model WisdomNote {
  id         String   @id @default(cuid())
  userId     String
  bookId     String
  quote      String
  impression String
  date       DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

// 채팅 관련 모델들
model ChatRoom {
  id          String   @id @default(cuid())
  name        String?
  type        String   // DIRECT, PARTY
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  messages    ChatMessage[]
  participants ChatParticipant[]
  quest       Quest?   @relation(fields: [questId], references: [id])
  questId     String?  @unique
  party       Party?   @relation(fields: [partyId], references: [id])
  partyId     String?  @unique
}

model ChatParticipant {
  id        String   @id @default(cuid())
  chatRoomId String
  userId    String
  joinedAt  DateTime @default(now())

  chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatRoomId, userId])
}

model ChatMessage {
  id         String   @id @default(cuid())
  chatRoomId String
  userId     String
  content    String
  isSystemMessage Boolean @default(false)
  systemMessageType String? // user_joined, user_left
  createdAt  DateTime @default(now())

  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
